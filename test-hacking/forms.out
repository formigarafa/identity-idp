
Randomized with seed 13967

PersonalKeyForm
  #submit
    when the form is valid
      returns FormResponse with success: true
    when the form is invalid
      returns FormResponse with success: false

PasswordForm
  behaves like password validation
    is expected to allow :password to be ‹"ValidPassword1!"›
    is expected to allow :password to be ‹"Valid Password1"›
    is expected to allow :password to be ‹"ValidPASSWORD!"›
    is expected to validate that :password cannot be empty/falsy, producing a custom validation error on failure
    is expected to allow :password to be ‹"VALIDPASSWORD1!"›
    is expected to allow :password to be ‹"validpassword1!"›
    is expected to validate that the length of :password is between 12 and 128
    is expected to allow :password to be ‹"bear bull bat baboon"›
  #submit
    when the request_id is not properly encoded
      does not throw an exception
    when the form is invalid
      returns false
    when the request_id is passed in the params
      tracks that it is present
    when the form is valid
      returns true
  behaves like strong password
    does not allow a password that needs more words
    does not allow a password that is common and/or needs more words
    does not allow a password that is the user email
    does not allow a password containing words from the user email (PENDING: Temporarily skipped with xit)
    does not allow a password that does not have the minimum number of graphemes

VerifyPersonalKeyForm
  #submit
    with the correct personal key
      has a successful response
      exposes the decrypted_pii as a separate attribute
    with an incorrect personal key
      is an unsuccessful response
      resets sensitive fields

TwoFactorLoginOptionsForm
  #submit
    when the form is valid
      returns true for success?
    when the form is invalid
      returns false for success? and includes errors

OtpVerificationForm
  #submit
    when the code is too short
      returns an unsuccessful response
      does not clear user pending OTP
    when the code is nil
      returns a successful response
      does not clear user pending OTP
    when the code is correct
      returns a successful response
      clears user pending OTP
    when the user does not have a pending OTP
      returns an unsuccessful response
      does not clear user pending OTP
    when the code is not numeric
      does not clear user pending OTP
      returns an unsuccessful response
    when the user pending OTP is expired
      returns an unsuccessful response
      does not clear user pending OTP

Idv::PhoneConfirmationOtpVerificationForm
  #submit
    handles nil and empty codes
    when the code matches
      returns a successful result
      clears the second factor attempts
    when the code does not match
      returns an unsuccessful result
      increments second factor attempts
    when the code is expired
      increment second factor attempts and locks out user after too many
      returns an unsuccessful result

Idv::PhoneForm
  #submit
    with specific allowed countries
      validates to only allow numbers from permitted countries
      with US as the sole allowed country
        validates to only allow numbers from permitted countries
    when the form is invalid
      returns an unsuccessful form response
    with previously submitted value
      uses the previously submitted value as the initial phone value
    when the form is valid
      when a phone number is provided
        returns a successful form response
    with unsupported delivery method
      with all delivery methods unsupported
        is invalid
      with one unsupported delivery method
        is valid
    with specific delivery methods
      validates to only allow numbers from permitted countries
    with user phone number
      uses the formatted phone number as the initial phone value
      with supported international user phone number
        uses the user phone number as the initial phone value
      with international user phone number in disallowed country
        does not use the user phone number as the initial phone value
      with international user phone number in unsupported country
        does not use the user phone number as the initial phone value
  behaves like a phone form
    phone uniqueness
      when phone is not already taken
        is valid
      when phone is already taken
        is valid
    #submit
      formats the phone before assigning it
    phone presence validation
      is invalid when phone is blank

TwoFactorOptionsForm
  #submit
    is unsuccessful if the selection is empty
    is unsuccessful if the selection is invalid
    is successful if the selection is valid
    is unsuccessful if the selection is invalid for multi mfa
    includes analytics hash with a methods count of zero
    is successful if user has existing method and does not select any options
    when phone is selected as their first authentication method
      does not submit the phone when selected as the first single option
    when the feature flag toggle for 2FA phone restriction is off
      proceeds with submission
    when the selection is different from the user's otp_delivery_preference
      updates the user's otp_delivery_preference if they have an alternate method selected
    when the selection is the same as the user's otp_delivery_preference
      does not update the user's otp_delivery_preference
    when a user wants to is required to add piv_cac on sign in
      when user is didnt select an mfa
        does not submits the form
      when user selects an mfa
        submits the form
    when the selection is not voice or sms
      does not update the user's otp_delivery_preference
    when a user wants to select phone as their second authentication method
      submits the form
      includes analytics hash with a method count of one

PasswordResetEmailForm
  behaves like email validation
    uses the valid_email gem with mx and ban_disposable options
  behaves like email normalization
    downcases and strips the email before validation
  #submit
    when email is valid and user does not exist
      returns hash with properties about the event and the nonexistent user
    when email is invalid
      returns hash with properties about the event and the nonexistent user
    when email is valid and user exists
      returns hash with properties about the event and the user

Idv::SsnFormatForm
  #submit
    when the form is valid
      returns a successful form response
    when the form is invalid
      returns an unsuccessful form response
    when the form has invalid attributes
      raises an error
  presence validations
    is invalid when required attribute is not present

NewPhoneForm
  #redact
    leaves in punctuation and spaces, but removes letters and numbers
  behaves like a phone form
    phone presence validation
      is invalid when phone is blank
    #submit
      formats the phone before assigning it
    phone uniqueness
      when phone is not already taken
        is valid
      when phone is already taken
        is valid
  #submit
    does not raise inclusion errors for Norwegian phone numbers
    vendor reports phone number is invalid
      includes redacted information for the error log
      is invalid and does not raise
    voip numbers
      when voip checks are disabled
        does not check the phone type
      when voip numbers are allowed
        does a voip check but does not enforce it
      when voip numbers are blocked
        is invalid
        logs the type and carrier
        when AWS rate limits info type checks
          logs a warning and fails open
        when the number is on the allowlist
          is valid
        when voip checks are disabled
          allows voip numbers since it cannot check the type
          does not check the phone type
    when otp_delivery_preference is not voice or sms
      is invalid
    blocklisted carrier numbers
      when phone number carrier is in blocklist
        is invalid
    when otp_delivery_preference is empty
      is invalid
    when otp_delivery_preference param is not present
      is valid
    when the user has already added the number
      is invalid
      is invalid if database phone is not formatted
    when otp_delivery_preference is voice and phone number does not support voice
      is invalid
    when phone is valid
      is valid
      does not update the user phone attribute
      preserves the format of the submitted phone number if phone is invalid
      includes otp preference in the form response extra
    premium rate phone numbers like 1-900
      is invalid
      logs the type
  #delivery_preference_sms?
    is true
    sms outage
      is false
  #delivery_preference_voice?
    is false
    sms outage
      is true
  phone validation
    validates that the number matches the requested international code
    is expected to validate that :international_code is either ‹"AD"›, ‹"AE"›, ‹"AF"›, ‹"AG"›, ‹"AI"›, ‹"AL"›, ‹"AM"›, ‹"AO"›, ‹"AR"›, ‹"AS"›, ‹"AT"›, ‹"AU"›, ‹"AW"›, ‹"AZ"›, ‹"BA"›, ‹"BB"›, ‹"BD"›, ‹"BE"›, ‹"BF"›, ‹"BG"›, ‹"BH"›, ‹"BI"›, ‹"BJ"›, ‹"BL"›, ‹"BM"›, ‹"BN"›, ‹"BO"›, ‹"BQ"›, ‹"BR"›, ‹"BS"›, ‹"BT"›, ‹"BW"›, ‹"BY"›, ‹"BZ"›, ‹"CA"›, ‹"CD"›, ‹"CF"›, ‹"CG"›, ‹"CH"›, ‹"CI"›, ‹"CK"›, ‹"CL"›, ‹"CM"›, ‹"CN"›, ‹"CO"›, ‹"CR"›, ‹"CV"›, ‹"CY"›, ‹"CZ"›, ‹"DE"›, ‹"DJ"›, ‹"DK"›, ‹"DM"›, ‹"DO"›, ‹"DZ"›, ‹"EC"›, ‹"EE"›, ‹"EG"›, ‹"ER"›, ‹"ES"›, ‹"ET"›, ‹"FI"›, ‹"FJ"›, ‹"FM"›, ‹"FO"›, ‹"FR"›, ‹"GA"›, ‹"GB"›, ‹"GD"›, ‹"GE"›, ‹"GF"›, ‹"GG"›, ‹"GH"›, ‹"GI"›, ‹"GL"›, ‹"GM"›, ‹"GN"›, ‹"GP"›, ‹"GQ"›, ‹"GR"›, ‹"GT"›, ‹"GU"›, ‹"GW"›, ‹"GY"›, ‹"HK"›, ‹"HN"›, ‹"HR"›, ‹"HT"›, ‹"HU"›, ‹"ID"›, ‹"IE"›, ‹"IL"›, ‹"IM"›, ‹"IN"›, ‹"IQ"›, ‹"IS"›, ‹"IT"›, ‹"JE"›, ‹"JM"›, ‹"JO"›, ‹"JP"›, ‹"KE"›, ‹"KG"›, ‹"KH"›, ‹"KI"›, ‹"KM"›, ‹"KN"›, ‹"KR"›, ‹"KW"›, ‹"KY"›, ‹"KZ"›, ‹"LA"›, ‹"LB"›, ‹"LC"›, ‹"LI"›, ‹"LK"›, ‹"LR"›, ‹"LS"›, ‹"LT"›, ‹"LU"›, ‹"LV"›, ‹"LY"›, ‹"MA"›, ‹"MC"›, ‹"MD"›, ‹"ME"›, ‹"MG"›, ‹"MH"›, ‹"MK"›, ‹"ML"›, ‹"MM"›, ‹"MN"›, ‹"MO"›, ‹"MP"›, ‹"MQ"›, ‹"MR"›, ‹"MS"›, ‹"MT"›, ‹"MU"›, ‹"MV"›, ‹"MW"›, ‹"MX"›, ‹"MY"›, ‹"MZ"›, ‹"NA"›, ‹"NC"›, ‹"NE"›, ‹"NG"›, ‹"NI"›, ‹"NL"›, ‹"NO"›, ‹"NP"›, ‹"NU"›, ‹"NZ"›, ‹"OM"›, ‹"PA"›, ‹"PE"›, ‹"PF"›, ‹"PG"›, ‹"PH"›, ‹"PK"›, ‹"PL"›, ‹"PR"›, ‹"PS"›, ‹"PT"›, ‹"PW"›, ‹"PY"›, ‹"QA"›, ‹"RE"›, ‹"RO"›, ‹"RS"›, ‹"RU"›, ‹"RW"›, ‹"SA"›, ‹"SB"›, ‹"SC"›, ‹"SE"›, ‹"SG"›, ‹"SI"›, ‹"SK"›, ‹"SL"›, ‹"SM"›, ‹"SN"›, ‹"SO"›, ‹"SR"›, ‹"SS"›, ‹"ST"›, ‹"SV"›, ‹"SZ"›, ‹"TC"›, ‹"TD"›, ‹"TG"›, ‹"TH"›, ‹"TJ"›, ‹"TL"›, ‹"TM"›, ‹"TN"›, ‹"TO"›, ‹"TR"›, ‹"TT"›, ‹"TV"›, ‹"TW"›, ‹"TZ"›, ‹"UA"›, ‹"UG"›, ‹"US"›, ‹"UY"›, ‹"UZ"›, ‹"VC"›, ‹"VE"›, ‹"VG"›, ‹"VI"›, ‹"VN"›, ‹"VU"›, ‹"WS"›, ‹"XK"›, ‹"YE"›, ‹"YT"›, ‹"ZA"›, ‹"ZM"›, or ‹"ZW"›

Idv::DocPiiForm
  #submit
    when there is an error with both name fields
      returns a single name-specific pii error
    when there was attention with barcode
      adds value as extra attribute
    when there is a non-string zipcode
      returns a single generic pii error
    when there is an error with name fields and dob
      returns a single generic pii error
    when there is an error with dob minimum age
      returns a single min age error
    when the form is valid
      returns a successful form response
  when there is an invalid jurisdiction
    responds with an unsuccessful result

OtpDeliverySelectionForm
  otp_delivery_preference inclusion validation
    is invalid when otp_delivery_preference is neither sms nor voice
  #submit
    when the form is valid
      returns true for success?
    when the form is invalid
      returns false for success? and includes errors
    with voice preference and unsupported phone
      changes the otp_delivery_preference to sms
    with voice preference and supported phone
      does not change the otp_delivery_preference to sms

Idv::ApiDocumentVerificationStatusForm
  #valid?
    with missing document capture session
      is invalid
    with successful result
      is valid
    with missing async state
      is invalid
    with unsuccessful result
      is invalid
    with pending result
      is valid
  #submit
    includes doc_auth_result
    includes remaining_attempts

Idv::OtpDeliveryMethodForm
  #submit
    with an unsupported value as the delivery method
      is unsuccessful
    with voice as the delivery method
      is successful
    with sms as the delivery method
      is successful

WebauthnVisitForm
  #platform_authenticator?
    is expected to eq false
    with platform authenticator
      is expected to eq true
  #submit
    returns FormResponse with success: true if there are no errors
    with platform authenticator
      returns FormResponse with success: true if there are no errors
    when there are errors
      returns FormResponse with success: false with an unrecognized error
      returns FormResponse with success: false with NotSupportedError
      returns FormResponse with success: false with InvalidStateError
      with platform authenticator
        returns FormResponse with success: false with an unrecognized error
        returns FormResponse with success: false with InvalidStateError
        returns FormResponse with success: false with NotSupportedError

ResetPasswordForm
  #submit
    when the user does not have an active profile
      includes that the profile was not deactivated in the form response
    when the password is valid but the token has expired
      returns a hash with errors
    when the unconfirmed email address has been confirmed by another account
      does not raise an error and is not successful
    when both the password and token are invalid
      returns a hash with errors
    when both the password and token are valid
      sets the user password to the submitted password
    behaves like strong password
      does not allow a password that does not have the minimum number of graphemes
      does not allow a password that is the user email
      does not allow a password that is common and/or needs more words
      does not allow a password containing words from the user email (PENDING: Temporarily skipped with xit)
      does not allow a password that needs more words
    when the user does not exist in the db
      returns a hash with errors
    when the password is invalid and token is valid
      returns a hash with errors
    when the user has an active profile
      deactivates the profile
  behaves like password validation
    is expected to allow :password to be ‹"VALIDPASSWORD1!"›
    is expected to allow :password to be ‹"ValidPassword1!"›
    is expected to allow :password to be ‹"validpassword1!"›
    is expected to allow :password to be ‹"Valid Password1"›
    is expected to validate that :password cannot be empty/falsy, producing a custom validation error on failure
    is expected to allow :password to be ‹"ValidPASSWORD!"›
    is expected to allow :password to be ‹"bear bull bat baboon"›
    is expected to validate that the length of :password is between 12 and 128

Api::Verify::DocumentCaptureErrorsDeleteForm
  #submit
    with an invalid document capture session uuid
      is returns an unsuccessful form response
    without a document capture session uuid
      is returns an unsuccessful form response
    with a valid document capture session uuid
      is returns an successful form response

OpenidConnectAuthorizeForm
  #success_redirect_uri
    when the identity has not been linked
      returns nil
    when the identity has been linked
      logs a hash of the code in the analytics params
      returns a redirect URI with the code from the identity session_uuid
  #submit
    with a bad redirect_uri
      has errors and does not redirect to the bad redirect_uri
    with valid params
      is successful
    with invalid params
      with a bad response_type
        is unsuccessful and has error messages
  #valid?
    when prompt is not given
      is expected to eq true
    with aal but not ial requested via acr_values
      has errors
    when scope is unauthorized and we block unauthorized scopes
      has errors
    when scope does not contain valid scopes
      has errors
    when prompt is blank
      is expected to eq false
    nonce
      without a nonce
        is expected to eq false
      with a nonce that is shorter than RANDOM_VALUE_MINIMUM_LENGTH characters
        is expected to eq false
    when scope is unauthorized and we do not block unauthorized scopes
      does not have errors
    when scope includes profile:verified_at but the sp is only ial1
      has errors
    with an unknown client_id
      has errors
    with all valid attributes
      has no errors
      is expected to eq true
    when prompt is not select_account or login
      is expected to eq false
    when prompt is login and allowed by sp
      is expected to eq true
    with no authorized acr_values
      has errors
    redirect_uri
      without a redirect_uri
        is expected to eq false
      with a redirect_uri not registered to the client
        has errors
      with a redirect_uri that only partially matches any registered redirect_uri
        is expected to eq false
      with a malformed redirect_uri
        has errors
    PKCE
      bad code_challenge_method
        has errors
      code_challenge but no code_challenge_method
        has errors
    when response_type is not code
      is expected to eq false
    when scope is good and we block unauthorized scopes
      does not have errors
    when prompt is login but not allowed by sp
      is expected to eq false
    with no valid acr_values
      has errors
    state
      with a state that is shorter than RANDOM_VALUE_MINIMUM_LENGTH characters
        is expected to eq false
      without a state
        is expected to eq false
  #ial2_requested?
    with ial1 and ial2
      is expected to eq true
    with a malformed ial
      is expected to eq false
    with ial1
      is expected to eq false
    with ial2
      is expected to eq true
  #acr_values
    is parsed into an array of valid ACR values
  #verified_within
    with a verified_within with a bad format
      has errors
    with a format in days
      parses the value as a number of days
    with a duration that is too short (<30 days)
      has errors
    without a verified_within
      is valid
  #link_identity_to_service_provider
    with PKCE
      records the code_challenge on the identity
  #ial
    when LOA1 passed
      returns 1
    when IAL2 passed
      returns 2
    when IALMAX passed
      returns 0
    when LOA3 passed
      returns 2
    when IAL1 passed
      returns 1
  #client_id
    returns the form client_id

OpenidConnectLogoutForm
  when we accept id_token_hint
    #submit
      with an invalid form
        has an error code in the redirect URI
        is not successful
      with a valid form
        deactivates the identity
        has a successful response
        has a redirect URI without errors
        with missing state
          deactivates the identity
          has a successful response
          has a redirect URI without errors
    #valid?
      validating state
        when state is shorter than the minimum length
          is not valid
        when state is missing
          is valid
      validating id_token_hint
        without an id_token_hint
          with a valid client_id
            is valid
          without client_id
            is not valid
        with an id_token_hint that is not a JWT
          is not valid
        with an expired, but otherwise valid id_token_hint
          is valid
        with a payload that does not correspond to an identity
          is not valid
      post_logout_redirect_uri
        with URI that does not match what is registered
          is not valid
        without a post_logout_redirect_uri
          is not valid
  when we reject id_token_hint
    #submit
      with a valid form
        has a successful response
        has a redirect URI without errors
        without state
          has a redirect URI without errors
          has a successful response
        with a current user
          deactivates the identity
      with an invalid form
        is not successful
        has an error code in the redirect URI
    #valid?
      validating state
        when state is shorter than the minimum length
          is not valid
        when state is missing
          is valid
      post_logout_redirect_uri
        with URI that does not match what is registered
          is not valid
        without a post_logout_redirect_uri
          is not valid
        when no client_id passed
          does not include error about redirect_uri
          is not valid
      validating id_token_hint
        without an id_token_hint
          is valid
        with an id_token_hint
          is not valid

EventDisavowal::PasswordResetFromDisavowalForm
  behaves like password validation
    is expected to allow :password to be ‹"VALIDPASSWORD1!"›
    is expected to allow :password to be ‹"ValidPassword1!"›
    is expected to allow :password to be ‹"validpassword1!"›
    is expected to validate that the length of :password is between 12 and 128
    is expected to allow :password to be ‹"bear bull bat baboon"›
    is expected to allow :password to be ‹"Valid Password1"›
    is expected to validate that :password cannot be empty/falsy, producing a custom validation error on failure
    is expected to allow :password to be ‹"ValidPASSWORD!"›
  with a valid password
    resets the users password
  with an invalid password
    does not reset the users passowrd

UserPivCacLoginForm
  #submit
    when nonce is invalid
      returns FormResponse with success: false
    when token is missing
      returns FormResponse with success: false
    when token is valid
      returns FormResponse with success: true
    when token is invalid
      returns FormResponse with success: false
  #valid_token?
    when token is blank
      returns false

TotpVerificationForm
  #submit
    when the form is valid
      returns FormResponse with success: true
    when the format of the code is not exactly 6 digits
      returns FormResponse with success: false
    when the form is invalid
      returns FormResponse with success: false

GpoVerifyForm
  #submit
    incorrect OTP
      clears form
    correct OTP
      logs the date the code was sent at
      returns true
      activates the pending profile
      pending in person enrollment
        updates establishing in-person enrollment to pending
        sets profile to pending in person verification
  #valid?
    OTP crockford normalizing
      when the entered OTP has ohs instead of zeroes
        is valid
      when the entered OTP has lowercase
        is valid
    when OTP is expired
      is invalid
    when OTP does not match
      is invalid
    when there is no pending profile
      is invalid
    when required attributes are not present
      is invalid

UserPivCacSetupForm
  #submit
    when token is invalid
      returns FormResponse with success: false
    when token is valid
      sends a recovery information changed event
      returns FormResponse with success: true
      and a user already has a piv/cac associated
        returns FormResponse with success: true
      and a piv/cac is already associated with another user
        returns FormResponse with success: false
    when nonce is invalid
      returns FormResponse with success: false
    when token is missing
      returns FormResponse with success: false

Idv::InheritedProofing::BaseForm
  #submit
    returns a FormResponse object
    before returning
      calls #valid?
  class methods
    .model_name
      returns the right model name
  #initialize
    when .user_pii is not overridden
      raises an error
  #validate
    with valid payload data
      returns true
    with invalid payload data
      when the payload has unrecognized fields
        returns true
      when the payload has missing required field data
        returns no errors because no data validations take place by default
        returns true
  #initialize
    when passing a valid payload hash
      raises no errors
    when passing an invalid payload hash
      when nil?
        behaves like the hash is blank?
          raises an error
      when empty?
        behaves like the hash is blank?
          raises an error
      when not a Hash
        raises an error

RegisterUserEmailForm
  behaves like email validation
    uses the valid_email gem with mx and ban_disposable options
  #submit
    when request_id is valid
      returns success with no errors
    when request_id is invalid
      returns successful and does not include request_id in email
    when user provides invalid email_language
      returns failure with errors
    when request_id is blank
      returns success with no errors
    when user does not agree to terms
      returns failure with errors
    when the email exists but is unconfirmed and on a confirmed user
      is valid and sends a registration email for a new user
    when email is not already taken
      is valid
      saves the user email_language for a valid form
    when email is already taken
      sets success to true to prevent revealing account existence
      creates throttle events after reaching throttle limit
    when email is invalid
      returns false and adds errors to the form object when domain is invalid
      returns false and adds errors to the form object
    when email is already taken and existing user is unconfirmed
      creates throttle events after reaching throttle limit
      sends confirmation instructions to existing user

Idv::InheritedProofing::Va::Form
  #service_error?
    when there is a service-related error
      returns true
    when there is not a service-related error
      returns false
  #submit
    with a valid payload
      returns a FormResponse indicating the no errors and successful status
    when there is a service-related error
      adds the unfiltered error to the FormResponse :extra Hash
    with an invalid payload
      when the payload has invalid field data
        returns a FormResponse indicating the correct errors and status
  #validate
    with valid payload data
      returns true
    with invalid payload data
      when the payload has missing fields
        adds the correct error messages for missing fields
        returns false
      when the payload has missing optional field data
        returns true
      when the payload has missing required field data
        returns false
        adds the correct error messages for required fields that are missing data
      when there is a service-related error
        returns false
        adds a user-friendly model error
  constants
    OPTIONAL_FIELDS
      returns the optional fields
    FIELDS
      returns all the fields
    REQUIRED_FIELDS
      returns the required fields
  #user_pii
    returns the correct user pii
  class methods
    .model_name
      returns the right model name
  #initialize
    when passing a valid payload hash
      raises no errors
    when passing an invalid payload hash
      when empty?
        behaves like the hash is blank?
          raises an error
      when not a Hash
        raises an error
      when nil?
        behaves like the hash is blank?
          raises an error

WebauthnSetupForm
  #submit
    when the input is valid
      creates a platform authenticator if the platform_authenticator param is set
      returns FormResponse with success: true and creates a webauthn configuration
      sends a recovery information changed event
    when the input is invalid
      returns FormResponse with success: false
      returns false with an error when the attestation response raises an error

UserPivCacVerificationForm
  #submit
    when token is missing
      returns FormResponse with success: false
    when token is invalid
      returns FormResponse with success: false
    when token is valid
      and a user has a different piv/cac associated
        returns FormResponse with success: false
      and a user has no piv/cac associated
        returns FormResponse with success: false
      and the correct piv/cac is presented
        returns FormResponse with success: true
        when nonce is bad
          returns FormResponse with success: false

TotpSetupForm
  #submit
    when name is not unique
      returns an unsuccessful form response
    when name is empty
      returns an unsuccessful form response
    when TOTP code is invalid
      returns FormResponse with success: false
    when TOTP code is valid
      returns FormResponse with success: true
      sends a recovery information changed event
    when the secret key is not present
      returns FormResponse with success: false

SecurityEventForm
  #submit
    creates a SecurityEvent record
    jti uniqueness
      with a jti that has already been recorded for that same user and issuer
        reports an error as a duplicate
        does not create a new record
      with a jti that has already been recorded for that same user, different issuer
        reports a success
        creates a record
    when request is invalid
      does not create a SecurityEvent record
    analytics attributes
      contains the SP, user ID, error code
      with an invalid request
        contains the error code
    for authorization fraud events
      resets the user password for authorization fraud detected events
      creates a password_invalidated event
    when the event has an occurred_at
      saves the occurred_at to the database
    for identity fraud events
      does not reset the user password
  #valid?
    is valid with a valid form
    event type
      with an additional event type
        is valid
      with no events
        is invalid
      with a bad event type
        is invalid
    aud
      with a wrong audience endpoint URL
        is invalid
    JWT
      with a body that is not a JWT
        is invalid
      when signed with a different key than registered to the SP
        is invalid
      when signed with an unsupported algorithm
        is invalid
      when the issuer does not have a public key registered
        is invalid
    with a JWT header typ other than secevent+jwt
      is invalid
    iss
      with an unknown issuer
        is invalid
    with a top-level sub claim
      is invalid
    jti
      without a jti
        is invalid
    event.subject.sub
      when the service provider has no agency
        is still valid
      with a bad uuid
        is invalid
      with a uuid for a different identity
        is invalid
    exp
      is invalid with an exp claim
    subject_type
      with a bad subject type
        is invalid

EditPhoneForm
  #one_phone_configured?
    when editing a form with multiple numbers set up
      recognizes that there are multiple phone methods set up
    when editing a form with only one number set up
      recognizes it as the only method set up
  #submit
    when delivery_preference is not voice or sms
      is invalid
    when delivery_preference is empty
      is invalid
    when delivery_preference is valid
      includes delivery_preference in the form response extra
      updates the phone number
    default phone selection
      when the make_default_number param is true
        makes the phone configuration the default configuration
      when the make_default_number param is false
        does not make the phone configuration the default configuration
      when the make_default_number param is not present
        does not make the phone configuration the default configuration

Idv::ApiImageUploadForm
  #valid?
    with all valid images
      is valid
    when document_capture_session_uuid param is missing
      is not valid
    when throttled from submission
      is not valid
    when document_capture_session_uuid does not correspond to a record
      is not valid
  #submit
    posting images to client fails
      is not successful
      includes client response errors
      includes remaining_attempts
    image source
      malformed image metadata
        sets image source to unknown
      acuant images
        sets image source to acuant sdk
      mixed sources
        sets image source to unknown
      manual uploads
        sets image source to unknown
    invalid metadata shape
      logs analytics excluding invalid metadata
      returns the expected response
    encrypted document storage
      when encrypted image storage is disabled
        does not send image info to attempts api
        does not write images
      when encrypted image storage is enabled
        writes encrypted documents
    form is missing a required param
      is not successful
      includes remaining_attempts
    PII validation from client response fails
      is not successful
      includes doc_pii errors
      includes remaining_attempts
    with a valid form
      logs analytics
      returns the expected response
    image data returns unknown errors
      logs a doc auth warning
      returns the expected response

TwoFactorAuthentication::PhoneDeletionForm
  #submit
    with multiple mfa methods available
      removes the phone
      returns analytics
      updates the user remember device revokation timestamp
      returns success
    with only a single mfa method
      returns failure
      leaves the phone alone
      returns analytics
    with a phone of a different user
      returns failure
      leaves the phone alone
      returns analytics
    with no phone configuration
      leaves the phone alone
      returns success
      returns analytics

UpdateUserPasswordForm
  behaves like password validation
    is expected to validate that the length of :password is between 12 and 128
    is expected to allow :password to be ‹"validpassword1!"›
    is expected to validate that :password cannot be empty/falsy, producing a custom validation error on failure
    is expected to allow :password to be ‹"ValidPASSWORD!"›
    is expected to allow :password to be ‹"VALIDPASSWORD1!"›
    is expected to allow :password to be ‹"Valid Password1"›
    is expected to allow :password to be ‹"ValidPassword1!"›
    is expected to allow :password to be ‹"bear bull bat baboon"›
  #submit
    when the user does not have an active profile
      does not call ActiveProfileEncryptor
    when the user has an active profile
      encrypts the active profile
    when the password is valid
      returns FormResponse with success: true
      updates the user
    when the password is invalid
      returns FormResponse with success: false and does not do anything else
  behaves like strong password
    does not allow a password that needs more words
    does not allow a password containing words from the user email (PENDING: Temporarily skipped with xit)
    does not allow a password that is common and/or needs more words
    does not allow a password that is the user email
    does not allow a password that does not have the minimum number of graphemes

VerifyPasswordForm
  #submit
    when the form is valid
      is successful
    when the password is invalid
      returns errors

WebauthnVerificationForm
  #submit
    when the input is invalid
      returns FormResponses with success: false when verification raises OpenSSL exception
      returns FormResponse with success: false
    when the input is valid for platform authenticator
      returns FormResponse with success: true
    when the input is valid for non-platform authenticator
      returns FormResponse with success: true

OpenidConnectTokenForm
  #valid?
    code
      the code has a null byte
        is invalid
      using the same code a second time
        is invalid
      code is nil
        is invalid
      code has expired
        is invalid
      with a bad code
        is invalid
    neither PKCE nor private_key_jwt params
      is invalid
    PKCE
      with a code_challenge but a missing code_verifier
        is not valid
      with a code_challenge does not have base64 padding
        is valid
      with valid params
        is false, and has errors if the sp is set for jwt only mode
        is true, and has no errors
        is true, and has no errors if the sp is set for pkce only mode
      with a code_challenge that is not the SHA256 of the code_verifier
        is not valid
    private_key_jwt
      with valid params
        is true, and has no errors
        is false, and has errors if the sp is set for pkce only mode
        is true, and has no errors when the sp is set to jwt only mode
        with a trailing slash in the audience url
          is valid
      with a bad client_assertion
        signed by an unknown key
          is invalid
        with an issued time in the future
          is invalid
        with a list of audiences not including the token url
          is invalid
        with a list of audiences including the token url
          is valid
        with the old audience
          is invalid
        with no issued time
          is still valid
        with a bad subject
          is invalid
        service provider has no certs registered
          is has an error
        signed by a second key
          is still valid
        with an already expired assertion
          is invalid
        without an audience
          is invalid
        with a bad audience
          is invalid
        with a bad issuer
          is invalid
      with a bad client_assertion_type
        is expected to eq false
    with an incorrect grant_type
      is expected to eq false
  #response
    with invalid params
      has no id_token
      has an error key in the response
    with valid params
      has a properly-encoded id_token with an expiration that matches the expires_in
      specifies its token type
      has an access_token
  #submit
    with invalid params
      returns FormResponse with success: false
    with valid params
      returns FormResponse with success: true

Idv::ApiDocumentVerificationForm
  #valid?
    when encryption key is missing
      is not valid
    with all valid images
      is valid
    when url is invalid
      is not valid
    when document_capture_session_uuid does not correspond to a record
      is not valid
    when document_capture_session_uuid param is missing
      is not valid
    when iv is missing
      is not valid
    when throttled from submission
      is not valid
  #submit
    includes remaining_attempts

UpdateEmailLanguageForm
  #submit
    with a valid email_language
      is valid and has no errors
      updates the user email_language
    with an supported email_language
      does not update the user email_language
      is invalid

AddUserEmailForm
  #submit
    creates a new EmailAddress record for a new email address
    when the domain is invalid
      fails and does not send a confirmation email
    when the new email address has an expired previous attempt for the same account
      sends a confirmation email, as if it was not previously linked

DeleteUserEmailForm
  #submit
    with only a single email address
      returns failure
      does not notify subscribers that the identifier was recycled or email changed
      leaves the last email alone
    with multiple email addresses
      notifies subscribers that the identifier was recycled and the email changed
      returns success
      removes the email
    with a email of a different user
      returns failure
      does not subscribers that the identier was recycled
      leaves the email alone

Idv::SsnForm
  presence validations
    is invalid when required attribute is not present
  #submit
    when the form is invalid
      returns an unsuccessful form response
    when the form has invalid attributes
      raises an error
    when the form is valid
      returns a successful form response
      when the SSN is a duplicate
        logs that there is a duplicate SSN

Pending: (Failures listed here are expected and do not affect your suite's status)

  1) PasswordForm behaves like strong password does not allow a password containing words from the user email
     # Temporarily skipped with xit
     # ./spec/support/shared_examples/password_strength.rb:41

  2) ResetPasswordForm#submit behaves like strong password does not allow a password containing words from the user email
     # Temporarily skipped with xit
     # ./spec/support/shared_examples/password_strength.rb:41

  3) UpdateUserPasswordForm behaves like strong password does not allow a password containing words from the user email
     # Temporarily skipped with xit
     # ./spec/support/shared_examples/password_strength.rb:41

Top 10 slowest examples (7.36 seconds, 12.3% of total time):
  RegisterUserEmailForm#submit when email is already taken and existing user is unconfirmed creates throttle events after reaching throttle limit
    1.54 seconds ./spec/forms/register_user_email_form_spec.rb:82
  RegisterUserEmailForm#submit when email is already taken creates throttle events after reaching throttle limit
    1.06 seconds ./spec/forms/register_user_email_form_spec.rb:37
  UpdateUserPasswordForm behaves like password validation is expected to validate that the length of :password is between 12 and 128
    0.85887 seconds ./spec/support/shared_examples_for_password_validation.rb:6
  ResetPasswordForm behaves like password validation is expected to validate that the length of :password is between 12 and 128
    0.66834 seconds ./spec/support/shared_examples_for_password_validation.rb:6
  RegisterUserEmailForm#submit when email is not already taken saves the user email_language for a valid form
    0.59915 seconds ./spec/forms/register_user_email_form_spec.rb:138
  SecurityEventForm#submit creates a SecurityEvent record
    0.56945 seconds ./spec/forms/security_event_form_spec.rb:45
  SecurityEventForm#submit for authorization fraud events resets the user password for authorization fraud detected events
    0.55866 seconds ./spec/forms/security_event_form_spec.rb:73
  SecurityEventForm#submit for authorization fraud events creates a password_invalidated event
    0.51585 seconds ./spec/forms/security_event_form_spec.rb:77
  GpoVerifyForm#submit correct OTP pending in person enrollment sets profile to pending in person verification
    0.49436 seconds ./spec/forms/gpo_verify_form_spec.rb:132
  EventDisavowal::PasswordResetFromDisavowalForm behaves like password validation is expected to validate that the length of :password is between 12 and 128
    0.4941 seconds ./spec/support/shared_examples_for_password_validation.rb:6

Top 10 slowest example groups:
  RegisterUserEmailForm
    0.35267 seconds average (5.29 seconds / 15 examples) ./spec/forms/register_user_email_form_spec.rb:3
  AddUserEmailForm
    0.29733 seconds average (0.89199 seconds / 3 examples) ./spec/forms/add_user_email_form_spec.rb:3
  SecurityEventForm
    0.2269 seconds average (6.81 seconds / 30 examples) ./spec/forms/security_event_form_spec.rb:3
  GpoVerifyForm
    0.17784 seconds average (2.13 seconds / 12 examples) ./spec/forms/gpo_verify_form_spec.rb:3
  PersonalKeyForm
    0.17757 seconds average (0.35514 seconds / 2 examples) ./spec/forms/personal_key_form_spec.rb:3
  OpenidConnectTokenForm
    0.15862 seconds average (6.03 seconds / 38 examples) ./spec/forms/openid_connect_token_form_spec.rb:3
  EventDisavowal::PasswordResetFromDisavowalForm
    0.15732 seconds average (1.57 seconds / 10 examples) ./spec/forms/event_disavowal/password_reset_from_disavowal_form_spec.rb:3
  Idv::ApiImageUploadForm
    0.15319 seconds average (3.83 seconds / 25 examples) ./spec/forms/idv/api_image_upload_form_spec.rb:3
  VerifyPersonalKeyForm
    0.14378 seconds average (0.57511 seconds / 4 examples) ./spec/forms/verify_personal_key_form_spec.rb:3
  TwoFactorAuthentication::PhoneDeletionForm
    0.13701 seconds average (1.78 seconds / 13 examples) ./spec/forms/two_factor_authentication/phone_deletion_form_spec.rb:3

Finished in 1 minute 0.03 seconds (files took 2.46 seconds to load)
527 examples, 0 failures, 3 pending

Randomized with seed 13967

Coverage report generated for RSpec to /home/jmax/projects/identity-idp/coverage. 6383 / 33101 LOC (19.28%) covered.
